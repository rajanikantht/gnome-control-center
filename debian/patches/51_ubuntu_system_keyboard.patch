Description: Implement the global keyboard spec at https://wiki.ubuntu.com/DefaultKeyboardSettings
Author: ?

Index: gnome-control-center-2.31.90/capplets/keyboard/gnome-keyboard-properties-dialog.ui
===================================================================
--- gnome-control-center-2.31.90.orig/capplets/keyboard/gnome-keyboard-properties-dialog.ui	2010-09-01 17:42:53.322617002 +1000
+++ gnome-control-center-2.31.90/capplets/keyboard/gnome-keyboard-properties-dialog.ui	2010-09-01 17:42:55.822617000 +1000
@@ -710,6 +710,26 @@
                         <property name="spacing">6</property>
                         <property name="layout_style">end</property>
                         <child>
+                          <object class="GtkButton" id="button_make_default">
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="receives_default">True</property>
+                            <child>
+                              <object class="GtkAlignment" id="alignment4">
+                                <property name="visible">True</property>
+                                <property name="left_padding">4</property>
+                                <property name="right_padding">4</property>
+                                <child>
+                                  <object class="GtkLabel" id="label15">
+                                    <property name="visible">True</property>
+                                    <property name="label" translatable="yes">Apply System-Wide...</property>
+                                  </object>
+                                </child>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                        <child>
                           <object class="GtkButton" id="xkb_layout_options">
                             <property name="label" translatable="yes">_Options...</property>
                             <property name="visible">True</property>
Index: gnome-control-center-2.31.90/capplets/keyboard/gnome-keyboard-properties-xkb.c
===================================================================
--- gnome-control-center-2.31.90.orig/capplets/keyboard/gnome-keyboard-properties-xkb.c	2010-09-01 17:42:53.312617002 +1000
+++ gnome-control-center-2.31.90/capplets/keyboard/gnome-keyboard-properties-xkb.c	2010-09-01 17:42:55.822617000 +1000
@@ -29,6 +29,7 @@
 #include <gdk/gdkx.h>
 #include <gconf/gconf-client.h>
 #include <glib/gi18n.h>
+#include <dbus/dbus-glib.h>
 
 #include "capplet-util.h"
 #include "gconf-property-editor.h"
@@ -124,6 +125,142 @@
 	xkb_gconf_client = NULL;
 }
 
+// mvo: make default entry the system wide default
+static void
+make_default (GtkWidget * button, GtkBuilder * dialog)
+{
+    GkbdKeyboardConfig kbd;
+	GError *error = NULL;
+	gboolean dbus_ret, res;
+	DBusGConnection *systembus, *sessionbus;
+	DBusGProxy *dbus_proxy;
+	int default_group;
+	gchar model[128] = {0,};
+	gchar layout[128] = {0,};
+	gchar variant[128] = {0,};
+	gchar options[256] = {0,};
+
+	// get current settings
+	gkbd_keyboard_config_init (&kbd, xkb_gconf_client, engine);
+	gkbd_keyboard_config_load_from_gconf (&kbd, &initial_config);
+	default_group = gconf_client_get_int(xkb_gconf_client, 
+					     "/desktop/gnome/peripherals/keyboard/general/defaultGroup",
+					     NULL);
+
+	// convert so that its apprioriate for the dbus backend
+	strncpy(model, kbd.model, sizeof(model));
+
+	// Copy GSList layouts and variants into gchar* with commas
+	// Put default layout first - index == -1
+	gchar*  p_variant = variant;
+	gchar*  p_layout = layout;
+	GSList* group = kbd.layouts_variants;
+	gint    index;
+	for (index = -1; group != NULL; index++)
+	{
+		gchar* data;
+		if (index >= 0) {
+			data = (gchar*) group->data;
+			group = g_slist_next(group);
+		} else
+			data = (gchar*)g_slist_nth_data(group, default_group);
+		if (data == NULL || index == default_group)
+			continue;
+		
+		gchar** layout_variant = g_strsplit(data, "\t", -1);
+		strncpy(p_layout, layout_variant[0],
+		        sizeof(layout) - (p_layout-layout+1)*sizeof(gchar));
+		p_layout += strlen(p_layout);
+		(*p_layout++) = ',';
+		
+		if(g_strv_length(layout_variant) > 1) {
+			p_variant = strncpy(p_variant, layout_variant[1],
+			                    sizeof(variant) - (p_variant-variant+1)*sizeof(gchar));
+			p_variant += strlen(p_variant);
+		}
+		(*p_variant++) = ',';
+		
+		g_strfreev(layout_variant);
+	}
+	(*--p_layout) = 0;
+	(*--p_variant) = 0;
+
+	// build options string
+	GString *options_str = g_string_new("");
+	GSList *l = kbd.options;
+	if (l && l->data) {
+	   gchar** options_v = g_strsplit(l->data,"\t",-1);
+	   options_str = g_string_append(options_str, options_v[1]);
+	   g_strfreev(options_v);
+	}
+	while(l = g_list_next(l)) {
+	   options_str = g_string_append(options_str, ",");
+	   gchar** options_v = g_strsplit(l->data,"\t",-1);
+	   options_str = g_string_append(options_str, options_v[1]);
+	   g_strfreev(options_v);
+	}
+	strncpy(options, options_str->str, sizeof(options));
+	g_string_free(options_str, TRUE);
+	gkbd_keyboard_config_term (&kbd);
+
+	// the console does not deal very well with evdev, we let
+	// the auto detection handle this for now
+	if (strcmp(model,"evdev") == 0)
+	   strcpy(model,"");
+
+#if 0	
+	printf("model: %s\n", model);
+	printf("layout: '%s'\n", layout);
+	printf("variant: '%s'\n", variant);
+	printf("options: '%s'\n", options);
+#endif
+
+	// now do the dbus stuff
+	sessionbus = dbus_g_bus_get (DBUS_BUS_SESSION, &error);
+	if (sessionbus == NULL) {
+	   g_printerr ("Failed to open connection to bus: %s\n",
+		       error->message);
+	   g_error_free (error);
+	   return;
+	}
+
+	systembus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
+	dbus_proxy = dbus_g_proxy_new_for_name (systembus,
+						"com.ubuntu.SystemService",
+						"/",
+						"com.ubuntu.SystemService");
+	if (dbus_proxy == NULL) {
+	   g_printerr ("Failed to get dbus proxy: %s\n",
+		       error->message);
+	   g_error_free (error);
+	   return;
+	}
+
+	dbus_ret = dbus_g_proxy_call (dbus_proxy, "set_keyboard", &error, 
+				      G_TYPE_STRING, model,
+				      G_TYPE_STRING, layout,
+				      G_TYPE_STRING, variant,
+				      G_TYPE_STRING, options,
+				      G_TYPE_INVALID,
+				      G_TYPE_BOOLEAN, &res, 
+				      G_TYPE_INVALID);
+	if (!dbus_ret) {
+	      if (error->domain == DBUS_GERROR && 
+		  error->code == DBUS_GERROR_REMOTE_EXCEPTION)
+		 g_printerr ("Caught remote method exception %s: %s",
+			     dbus_g_error_get_name (error),
+			     error->message);
+	      else
+		 g_printerr ("Error: %s\n", error->message);
+	      g_error_free (error);
+	      return;
+	}
+
+
+	//printf("res: %i\n", res);
+	g_object_unref (dbus_proxy);
+}
+
 static void
 reset_to_defaults (GtkWidget * button, GtkBuilder * dialog)
 {
@@ -219,6 +356,11 @@
 			  "toggled", (GCallback)
 			  chk_new_windows_inherit_layout_toggled, dialog);
 
+	// mvo: global keyboard setting
+	g_signal_connect (G_OBJECT (WID ("button_make_default")),
+			  "clicked", G_CALLBACK (make_default),
+			  dialog);
+
 	g_signal_connect_swapped (G_OBJECT (WID ("xkb_layout_options")),
 				  "clicked",
 				  G_CALLBACK (xkb_options_popup_dialog),
