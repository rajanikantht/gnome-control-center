Index: gnome-control-center-3.3.92/configure.ac
===================================================================
--- gnome-control-center-3.3.92.orig/configure.ac	2012-03-21 13:06:05.678241395 +0100
+++ gnome-control-center-3.3.92/configure.ac	2012-03-21 13:06:05.694241480 +0100
@@ -109,7 +109,7 @@
 PKG_CHECK_MODULES(DISPLAY_PANEL, $COMMON_MODULES gnome-desktop-3.0 >= 3.1.0 gconf-2.0)
 PKG_CHECK_MODULES(INFO_PANEL, $COMMON_MODULES libgtop-2.0
 		  polkit-gobject-1 >= $POLKIT_REQUIRED_VERSION)
-PKG_CHECK_MODULES(KEYBOARD_PANEL, $COMMON_MODULES x11)
+PKG_CHECK_MODULES(KEYBOARD_PANEL, $COMMON_MODULES gconf-2.0 x11)
 PKG_CHECK_MODULES(MEDIA_PANEL, $COMMON_MODULES)
 PKG_CHECK_MODULES(MOUSE_PANEL, $COMMON_MODULES xi >= 1.2
                   gnome-settings-daemon >= $GSD_REQUIRED_VERSION x11)
Index: gnome-control-center-3.3.92/panels/keyboard/cc-keyboard-item.c
===================================================================
--- gnome-control-center-3.3.92.orig/panels/keyboard/cc-keyboard-item.c	2012-02-20 20:09:01.000000000 +0100
+++ gnome-control-center-3.3.92/panels/keyboard/cc-keyboard-item.c	2012-03-21 13:06:05.694241480 +0100
@@ -27,12 +27,12 @@
 #include <gio/gio.h>
 #include <glib/gi18n-lib.h>
 
+#include <gconf/gconf-client.h>
+
 #include "cc-keyboard-item.h"
 
 #define CC_KEYBOARD_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_KEYBOARD_ITEM, CcKeyboardItemPrivate))
 
-#define CUSTOM_KEYS_SCHEMA "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding"
-
 struct CcKeyboardItemPrivate
 {
   /* properties */
@@ -150,7 +150,29 @@
   if (set_backend == FALSE)
     return;
 
-  settings_set_binding (item->settings, item->key, item->binding);
+  if (item->type == CC_KEYBOARD_ITEM_TYPE_GCONF ||
+      item->type == CC_KEYBOARD_ITEM_TYPE_GCONF_DIR)
+    {
+      GConfClient *client;
+      GError *err = NULL;
+      const char *key;
+
+      client = gconf_client_get_default ();
+      if (item->type == CC_KEYBOARD_ITEM_TYPE_GCONF)
+	key = item->gconf_key;
+      else
+	key = item->binding_gconf_key;
+      gconf_client_set_string (client, key, item->binding, &err);
+      if (err != NULL)
+        {
+	  g_warning ("Failed to set '%s' to '%s': %s", key, item->binding, err->message);
+	  g_error_free (err);
+	}
+    }
+  else if (item->type == CC_KEYBOARD_ITEM_TYPE_GSETTINGS)
+    {
+      settings_set_binding (item->settings, item->key, item->binding);
+    }
 }
 
 const char *
@@ -321,6 +343,7 @@
 cc_keyboard_item_finalize (GObject *object)
 {
   CcKeyboardItem *item;
+  GConfClient *client;
 
   g_return_if_fail (object != NULL);
   g_return_if_fail (CC_IS_KEYBOARD_ITEM (object));
@@ -329,15 +352,35 @@
 
   g_return_if_fail (item->priv != NULL);
 
+  /* Remove GConf watches */
+  client = gconf_client_get_default ();
+
+  if (item->gconf_key_dir != NULL && item->monitored_dir)
+    gconf_client_remove_dir (client, item->gconf_key_dir, NULL);
+  else if (item->gconf_key != NULL && item->monitored)
+    gconf_client_remove_dir (client, item->gconf_key, NULL);
+
+  if (item->gconf_cnxn != 0)
+    gconf_client_notify_remove (client, item->gconf_cnxn);
+  if (item->gconf_cnxn_desc != 0)
+    gconf_client_notify_remove (client, item->gconf_cnxn_desc);
+  if (item->gconf_cnxn_cmd != 0)
+    gconf_client_notify_remove (client, item->gconf_cnxn_cmd);
   if (item->settings != NULL)
     g_object_unref (item->settings);
 
+  g_object_unref (client);
+
   /* Free memory */
   g_free (item->binding);
   g_free (item->gettext_package);
-  g_free (item->gsettings_path);
+  g_free (item->gconf_key);
+  g_free (item->gconf_key_dir);
+  g_free (item->binding_gconf_key);
   g_free (item->description);
+  g_free (item->desc_gconf_key);
   g_free (item->command);
+  g_free (item->cmd_gconf_key);
   g_free (item->schema);
   g_free (item->key);
 
@@ -356,6 +399,48 @@
   return CC_KEYBOARD_ITEM (object);
 }
 
+static void
+keybinding_description_changed (GConfClient    *client,
+                                guint           cnxn_id,
+                                GConfEntry     *entry,
+                                CcKeyboardItem *item)
+{
+  const gchar *key_value;
+
+  key_value = entry->value ? gconf_value_get_string (entry->value) : NULL;
+  _set_description (item, key_value);
+  item->desc_editable = gconf_entry_get_is_writable (entry);
+  g_object_notify (G_OBJECT (item), "description");
+}
+
+static void
+keybinding_key_changed (GConfClient    *client,
+                        guint           cnxn_id,
+                        GConfEntry     *entry,
+                        CcKeyboardItem *item)
+{
+  const gchar *key_value;
+
+  key_value = entry->value ? gconf_value_get_string (entry->value) : NULL;
+  _set_binding (item, key_value, FALSE);
+  item->editable = gconf_entry_get_is_writable (entry);
+  g_object_notify (G_OBJECT (item), "binding");
+}
+
+static void
+keybinding_command_changed (GConfClient    *client,
+                            guint           cnxn_id,
+                            GConfEntry     *entry,
+                            CcKeyboardItem *item)
+{
+  const gchar *key_value;
+
+  key_value = entry->value ? gconf_value_get_string (entry->value) : NULL;
+  _set_command (item, key_value);
+  item->cmd_editable = gconf_entry_get_is_writable (entry);
+  g_object_notify (G_OBJECT (item), "command");
+}
+
 /* wrapper around g_settings_get_str[ing|v] */
 static char *
 settings_get_binding (GSettings  *settings,
@@ -394,34 +479,118 @@
 }
 
 gboolean
-cc_keyboard_item_load_from_gsettings_path (CcKeyboardItem *item,
-                                           const char     *path,
-                                           gboolean        reset)
-{
-  item->schema = g_strdup (CUSTOM_KEYS_SCHEMA);
-  item->gsettings_path = g_strdup (path);
-  item->key = g_strdup ("binding");
-  item->settings = g_settings_new_with_path (item->schema, path);
-  item->editable = g_settings_is_writable (item->settings, item->key);
-  item->desc_editable = g_settings_is_writable (item->settings, "name");
-  item->cmd_editable = g_settings_is_writable (item->settings, "command");
+cc_keyboard_item_load_from_gconf (CcKeyboardItem *item,
+				  const char *gettext_package,
+                                  const char *key)
+{
+  GConfClient *client;
+  GConfEntry *entry;
+
+  client = gconf_client_get_default ();
+
+  item->gconf_key = g_strdup (key);
+  entry = gconf_client_get_entry (client,
+                                  item->gconf_key,
+                                  NULL,
+                                  TRUE,
+                                  NULL);
+  if (entry == NULL) {
+    g_object_unref (client);
+    return FALSE;
+  }
 
-  if (reset)
-    {
-      g_settings_reset (item->settings, "name");
-      g_settings_reset (item->settings, "command");
-      g_settings_reset (item->settings, "binding");
+  if (gconf_entry_get_schema_name (entry)) {
+    GConfSchema *schema;
+    const char *description;
+
+    schema = gconf_client_get_schema (client,
+                                      gconf_entry_get_schema_name (entry),
+                                      NULL);
+    if (schema != NULL) {
+      if (gettext_package != NULL) {
+	bind_textdomain_codeset (gettext_package, "UTF-8");
+	description = dgettext (gettext_package, gconf_schema_get_short_desc (schema));
+      } else {
+	description = _(gconf_schema_get_short_desc (schema));
+      }
+      item->description = g_strdup (description);
+      gconf_schema_free (schema);
     }
+  }
+  if (item->description == NULL) {
+    /* Only print a warning for keys that should have a schema */
+    g_warning ("No description for key '%s'", item->gconf_key);
+  }
+  item->editable = gconf_entry_get_is_writable (entry);
+  gconf_client_add_dir (client, item->gconf_key, GCONF_CLIENT_PRELOAD_ONELEVEL, NULL);
+  item->monitored = TRUE;
+  item->gconf_cnxn = gconf_client_notify_add (client,
+                                              item->gconf_key,
+                                              (GConfClientNotifyFunc) &keybinding_key_changed,
+                                              item, NULL, NULL);
+  item->binding = gconf_client_get_string (client, item->gconf_key, NULL);
+  binding_from_string (item->binding, &item->keyval, &item->keycode, &item->mask);
 
-  g_settings_bind (item->settings, "name",
-                   G_OBJECT (item), "description", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (item->settings, "command",
-                   G_OBJECT (item), "command", G_SETTINGS_BIND_DEFAULT);
+  gconf_entry_free (entry);
+  g_object_unref (client);
 
-  item->binding = settings_get_binding (item->settings, item->key);
+  return TRUE;
+}
+
+gboolean
+cc_keyboard_item_load_from_gconf_dir (CcKeyboardItem *item,
+                                      const char *key_dir)
+{
+  GConfClient *client;
+  GConfEntry *entry;
+
+  /* FIXME add guards:
+   * key_dir finishing with '/' */
+
+  client = gconf_client_get_default ();
+
+  item->gconf_key_dir = g_strdup (key_dir);
+  item->binding_gconf_key = g_strdup_printf ("%s/binding", item->gconf_key_dir);
+  item->desc_gconf_key = g_strdup_printf ("%s/name", item->gconf_key_dir);
+  item->cmd_gconf_key = g_strdup_printf ("%s/action", item->gconf_key_dir);
+  item->description = gconf_client_get_string (client, item->desc_gconf_key, NULL);
+
+  entry = gconf_client_get_entry (client,
+                                  item->binding_gconf_key,
+                                  NULL,
+                                  TRUE,
+                                  NULL);
+  if (entry == NULL)
+    return FALSE;
+
+  item->command = gconf_client_get_string (client, item->cmd_gconf_key, NULL);
+  item->editable = gconf_entry_get_is_writable (entry);
+  gconf_client_add_dir (client, item->gconf_key_dir, GCONF_CLIENT_PRELOAD_ONELEVEL, NULL);
+  item->monitored_dir = TRUE;
+
+  item->desc_editable = gconf_client_key_is_writable (client, item->desc_gconf_key, NULL);
+  item->gconf_cnxn_desc = gconf_client_notify_add (client,
+                                                   item->desc_gconf_key,
+                                                   (GConfClientNotifyFunc) &keybinding_description_changed,
+                                                   item, NULL, NULL);
+
+  item->cmd_editable = gconf_client_key_is_writable (client, item->cmd_gconf_key, NULL);
+  item->gconf_cnxn_cmd = gconf_client_notify_add (client,
+                                                  item->cmd_gconf_key,
+                                                  (GConfClientNotifyFunc) &keybinding_command_changed,
+                                                  item, NULL, NULL);
+
+  item->cmd_editable = gconf_client_key_is_writable (client, item->binding_gconf_key, NULL);
+  item->gconf_cnxn = gconf_client_notify_add (client,
+                                              item->binding_gconf_key,
+                                              (GConfClientNotifyFunc) &keybinding_key_changed,
+                                              item, NULL, NULL);
+
+  item->binding = gconf_client_get_string (client, item->binding_gconf_key, NULL);
   binding_from_string (item->binding, &item->keyval, &item->keycode, &item->mask);
-  g_signal_connect (G_OBJECT (item->settings), "changed::binding",
-		    G_CALLBACK (binding_changed), item);
+
+  gconf_entry_free (entry);
+  g_object_unref (client);
 
   return TRUE;
 }
@@ -459,8 +628,10 @@
     return FALSE;
   switch (a->type)
     {
-      case CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH:
-	return g_str_equal (a->gsettings_path, b->gsettings_path);
+      case CC_KEYBOARD_ITEM_TYPE_GCONF:
+        return g_str_equal (a->gconf_key, b->gconf_key);
+      case CC_KEYBOARD_ITEM_TYPE_GCONF_DIR:
+	return g_str_equal (a->gconf_key_dir, b->gconf_key_dir);
       case CC_KEYBOARD_ITEM_TYPE_GSETTINGS:
 	return (g_str_equal (a->schema, b->schema) &&
 		g_str_equal (a->key, b->key));
Index: gnome-control-center-3.3.92/panels/keyboard/cc-keyboard-item.h
===================================================================
--- gnome-control-center-3.3.92.orig/panels/keyboard/cc-keyboard-item.h	2012-02-14 11:13:17.000000000 +0100
+++ gnome-control-center-3.3.92/panels/keyboard/cc-keyboard-item.h	2012-03-21 13:06:05.694241480 +0100
@@ -41,7 +41,8 @@
 
 typedef enum {
 	CC_KEYBOARD_ITEM_TYPE_NONE = 0,
-	CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH,
+	CC_KEYBOARD_ITEM_TYPE_GCONF,
+	CC_KEYBOARD_ITEM_TYPE_GCONF_DIR,
 	CC_KEYBOARD_ITEM_TYPE_GSETTINGS
 } CcKeyboardItemType;
 
@@ -65,13 +66,28 @@
   char *description;
   char *gettext_package;
   char *binding;
+
+  /* GCONF */
+  char *gconf_key;
+  guint gconf_cnxn;
   gboolean editable;
+  gboolean monitored;
+
+  /* GCONF DIR */
+  char *gconf_key_dir;
+
+  char *binding_gconf_key;
 
-  /* GSettings path */
-  char *gsettings_path;
+  char *desc_gconf_key;
   gboolean desc_editable;
+  guint gconf_cnxn_desc;
+
   char *command;
+  char *cmd_gconf_key;
   gboolean cmd_editable;
+  guint gconf_cnxn_cmd;
+
+  gboolean monitored_dir;
 
   /* GSettings */
   char *schema;
@@ -87,9 +103,11 @@
 GType              cc_keyboard_item_get_type (void);
 
 CcKeyboardItem * cc_keyboard_item_new         (CcKeyboardItemType type);
-gboolean cc_keyboard_item_load_from_gsettings_path (CcKeyboardItem *item,
-					            const char     *path,
-					            gboolean        reset);
+gboolean cc_keyboard_item_load_from_gconf     (CcKeyboardItem *item,
+					       const char *gettext_package,
+					       const char *key);
+gboolean cc_keyboard_item_load_from_gconf_dir (CcKeyboardItem *item,
+					       const char *key_dir);
 gboolean cc_keyboard_item_load_from_gsettings (CcKeyboardItem *item,
 					       const char *description,
 					       const char *schema,
Index: gnome-control-center-3.3.92/panels/keyboard/keyboard-shortcuts.c
===================================================================
--- gnome-control-center-3.3.92.orig/panels/keyboard/keyboard-shortcuts.c	2012-02-20 10:59:01.000000000 +0100
+++ gnome-control-center-3.3.92/panels/keyboard/keyboard-shortcuts.c	2012-03-21 13:06:05.694241480 +0100
@@ -22,12 +22,13 @@
 #include <config.h>
 
 #include <glib/gi18n.h>
+#include <gconf/gconf-client.h>
 #include "keyboard-shortcuts.h"
 #include "cc-keyboard-item.h"
 #include "wm-common.h"
 
-#define BINDINGS_SCHEMA "org.gnome.settings-daemon.plugins.media-keys"
-#define CUSTOM_KEYS_BASENAME "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
+#define MAX_CUSTOM_SHORTCUTS 1000
+#define GCONF_BINDING_DIR "/desktop/gnome/keybindings"
 #define WID(builder, name) (GTK_WIDGET (gtk_builder_get_object (builder, name)))
 
 typedef struct {
@@ -49,8 +50,8 @@
   CcKeyboardItemType type;
   char *schema; /* GSettings schema name, if any */
   char *description; /* description for GSettings types */
-  char *gettext_package;
-  char *name; /* GSettings schema path, or GSettings key name depending on type */
+  char *gettext_package; /* used for GConf type */
+  char *name; /* GConf key, GConf directory, or GSettings key name depending on type */
 } KeyListEntry;
 
 enum
@@ -67,7 +68,6 @@
   SECTION_N_COLUMNS
 };
 
-static GSettings *settings = NULL;
 static GtkWidget *custom_shortcut_dialog = NULL;
 static GtkWidget *custom_shortcut_name_entry = NULL;
 static GtkWidget *custom_shortcut_command_entry = NULL;
@@ -131,13 +131,8 @@
         {
           CcKeyboardItem *item = g_ptr_array_index (keys, i);
 
-	  if (item->type == CC_KEYBOARD_ITEM_TYPE_GSETTINGS &&
-	      g_strcmp0 (name, item->key) == 0)
-	    {
-	          return TRUE;
-	    }
-
-	  return FALSE;
+          if (g_strcmp0 (name, item->gconf_key) == 0)
+            return TRUE;
         }
     }
 
@@ -173,7 +168,6 @@
   gtk_tree_model_foreach (item->model, (GtkTreeModelForeachFunc) keybinding_key_changed_foreach, item);
 }
 
-
 static void
 append_section (GtkBuilder         *builder,
                 const gchar        *title,
@@ -209,14 +203,17 @@
       CcKeyboardItem *item;
       gboolean ret;
 
-      if (have_key_for_group (group, keys_list[i].name))
+      if (have_key_for_group (group, keys_list[i].name)) /* FIXME broken for GSettings */
         continue;
 
       item = cc_keyboard_item_new (keys_list[i].type);
       switch (keys_list[i].type)
         {
-	case CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH:
-          ret = cc_keyboard_item_load_from_gsettings_path (item, keys_list[i].name, FALSE);
+	case CC_KEYBOARD_ITEM_TYPE_GCONF:
+          ret = cc_keyboard_item_load_from_gconf (item, keys_list[i].gettext_package, keys_list[i].name);
+          break;
+	case CC_KEYBOARD_ITEM_TYPE_GCONF_DIR:
+          ret = cc_keyboard_item_load_from_gconf_dir (item, keys_list[i].name);
           break;
 	case CC_KEYBOARD_ITEM_TYPE_GSETTINGS:
 	  ret = cc_keyboard_item_load_from_gsettings (item,
@@ -393,14 +390,12 @@
   if (name == NULL)
     return;
 
-  if (schema == NULL &&
-      keylist->schema == NULL) {
-    g_debug ("Ignored GConf keyboard shortcut '%s'", name);
-    return;
-  }
-
   key.name = g_strdup (name);
-  key.type = CC_KEYBOARD_ITEM_TYPE_GSETTINGS;
+  if (schema != NULL ||
+      keylist->schema != NULL)
+    key.type = CC_KEYBOARD_ITEM_TYPE_GSETTINGS;
+  else
+    key.type = CC_KEYBOARD_ITEM_TYPE_GCONF;
   key.description = g_strdup (description);
   key.gettext_package = g_strdup (keylist->package);
   key.schema = schema ? g_strdup (schema) : g_strdup (keylist->schema);
@@ -516,29 +511,35 @@
 }
 
 static void
-append_sections_from_gsettings (GtkBuilder *builder)
+append_sections_from_gconf (GtkBuilder *builder, const gchar *gconf_path)
 {
-  char **custom_paths;
+  GConfClient *client;
+  GSList *custom_list, *l;
   GArray *entries;
   KeyListEntry key;
-  int i;
 
-  /* load custom shortcuts from GSettings */
+  /* load custom shortcuts from GConf */
   entries = g_array_new (FALSE, TRUE, sizeof (KeyListEntry));
 
-  custom_paths = g_settings_get_strv (settings, "custom-keybindings");
-  for (i = 0; custom_paths[i]; i++)
+  client = gconf_client_get_default ();
+  custom_list = gconf_client_all_dirs (client, gconf_path, NULL);
+
+  for (l = custom_list; l != NULL; l = l->next)
     {
-      key.name = g_strdup (custom_paths[i]);
+      key.name = g_strdup (l->data);
       if (!have_key_for_group (BINDING_GROUP_USER, key.name))
         {
-          key.type = CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH;
+          key.type = CC_KEYBOARD_ITEM_TYPE_GCONF_DIR;
           g_array_append_val (entries, key);
         }
       else
         g_free (key.name);
+
+      g_free (l->data);
     }
-  g_strfreev (custom_paths);
+
+  g_slist_free (custom_list);
+  g_object_unref (client);
 
   if (entries->len > 0)
     {
@@ -656,7 +657,7 @@
   g_strfreev (wm_keybindings);
 
   /* Load custom keybindings */
-  append_sections_from_gsettings (builder);
+  append_sections_from_gconf (builder, GCONF_BINDING_DIR);
 
   /* Select the first item */
   gtk_tree_model_get_iter_first (sort_model, &iter);
@@ -797,41 +798,33 @@
 edit_custom_shortcut (CcKeyboardItem *item)
 {
   gint result;
+  const gchar *description, *command;
   gboolean ret;
-  GSettings *settings;
 
-  settings = g_settings_new_with_path (item->schema, item->gsettings_path);
-
-  g_settings_bind (settings, "name",
-                   G_OBJECT (custom_shortcut_name_entry), "text",
-                   G_SETTINGS_BIND_DEFAULT);
+  gtk_entry_set_text (GTK_ENTRY (custom_shortcut_name_entry), item->description ? item->description : "");
+  gtk_widget_set_sensitive (custom_shortcut_name_entry, item->desc_editable);
   gtk_widget_grab_focus (custom_shortcut_name_entry);
-
-  g_settings_bind (settings, "command",
-                   G_OBJECT (custom_shortcut_command_entry), "text",
-                   G_SETTINGS_BIND_DEFAULT);
-
-  g_settings_delay (settings);
+  gtk_entry_set_text (GTK_ENTRY (custom_shortcut_command_entry), item->command ? item->command : "");
+  gtk_widget_set_sensitive (custom_shortcut_command_entry, item->cmd_editable);
 
   gtk_window_present (GTK_WINDOW (custom_shortcut_dialog));
   result = gtk_dialog_run (GTK_DIALOG (custom_shortcut_dialog));
   switch (result)
     {
     case GTK_RESPONSE_OK:
-      g_settings_apply (settings);
+      description = gtk_entry_get_text (GTK_ENTRY (custom_shortcut_name_entry));
+      command = gtk_entry_get_text (GTK_ENTRY (custom_shortcut_command_entry));
+      g_object_set (G_OBJECT (item),
+		    "description", description,
+		    "command", command,
+		    NULL);
       ret = TRUE;
       break;
     default:
-      g_settings_revert (settings);
       ret = FALSE;
       break;
     }
 
-  g_settings_unbind (G_OBJECT (custom_shortcut_name_entry), "text");
-  g_settings_unbind (G_OBJECT (custom_shortcut_command_entry), "text");
-
-  g_object_unref (settings);
-
   gtk_widget_hide (custom_shortcut_dialog);
 
   return ret;
@@ -840,36 +833,37 @@
 static gboolean
 remove_custom_shortcut (GtkTreeModel *model, GtkTreeIter *iter)
 {
+  GConfClient *client;
+  gchar *base;
   CcKeyboardItem *item;
   GPtrArray *keys_array;
-  GVariantBuilder builder;
-  char **settings_paths;
-  int i;
+  GError *err = NULL;
 
   gtk_tree_model_get (model, iter,
                       DETAIL_KEYENTRY_COLUMN, &item,
                       -1);
 
   /* not a custom shortcut */
-  g_assert (item->type == CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH);
+  g_assert (item->type == CC_KEYBOARD_ITEM_TYPE_GCONF_DIR);
+
+  client = gconf_client_get_default ();
 
-  g_settings_delay (item->settings);
-  g_settings_reset (item->settings, "name");
-  g_settings_reset (item->settings, "command");
-  g_settings_reset (item->settings, "binding");
-  g_settings_apply (item->settings);
-  g_settings_sync ();
-
-  settings_paths = g_settings_get_strv (settings, "custom-keybindings");
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("as"));
-  for (i = 0; settings_paths[i]; i++)
-    if (strcmp (settings_paths[i], item->gsettings_path) != 0)
-      g_variant_builder_add (&builder, "s", settings_paths[i]);
-  g_settings_set_value (settings,
-                        "custom-keybindings", g_variant_builder_end (&builder));
-  g_strfreev (settings_paths);
+  base = g_strdup (item->gconf_key_dir);
   g_object_unref (item);
 
+  if (gconf_client_recursive_unset (client, base, 0, &err) == FALSE)
+    {
+      g_warning ("Failed to unset GConf directory '%s': %s", base, err->message);
+      g_error_free (err);
+    }
+
+  g_free (base);
+  /* suggest sync now so the unset directory actually gets dropped;
+   * if we don't do this we may end up with 'zombie' shortcuts when
+   * restarting the app */
+  gconf_client_suggest_sync (client, NULL);
+  g_object_unref (client);
+
   keys_array = g_hash_table_lookup (get_hash_for_group (BINDING_GROUP_USER), _("Custom Shortcuts"));
   g_ptr_array_remove (keys_array, item);
 
@@ -887,7 +881,7 @@
                       DETAIL_KEYENTRY_COLUMN, &item,
                       -1);
 
-  g_assert (item->type == CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH);
+  g_assert (item->type == CC_KEYBOARD_ITEM_TYPE_GCONF_DIR);
 
   edit_custom_shortcut (item);
   if (item->command == NULL || item->command[0] == '\0')
@@ -896,8 +890,17 @@
     }
   else
     {
+      GConfClient *client;
+
       gtk_list_store_set (GTK_LIST_STORE (model), iter,
                           DETAIL_KEYENTRY_COLUMN, item, -1);
+      client = gconf_client_get_default ();
+      if (item->description != NULL)
+        gconf_client_set_string (client, item->desc_gconf_key, item->description, NULL);
+      else
+        gconf_client_unset (client, item->desc_gconf_key, NULL);
+      gconf_client_set_string (client, item->cmd_gconf_key, item->command, NULL);
+      g_object_unref (client);
     }
 }
 
@@ -991,6 +994,40 @@
     }
 }
 
+static void
+description_edited_callback (GtkCellRendererText *renderer,
+                             gchar               *path_string,
+                             gchar               *new_text,
+                             gpointer             user_data)
+{
+  GConfClient *client;
+  GtkTreeView *view = GTK_TREE_VIEW (user_data);
+  GtkTreeModel *model;
+  GtkTreePath *path = gtk_tree_path_new_from_string (path_string);
+  GtkTreeIter iter;
+  CcKeyboardItem *item;
+
+  model = gtk_tree_view_get_model (view);
+  gtk_tree_model_get_iter (model, &iter, path);
+  gtk_tree_path_free (path);
+
+  gtk_tree_model_get (model, &iter,
+                      DETAIL_KEYENTRY_COLUMN, &item,
+                      -1);
+
+  /* sanity check */
+  if (item == NULL || item->desc_gconf_key == NULL)
+    return;
+
+  g_assert (item->type == CC_KEYBOARD_ITEM_TYPE_GCONF_DIR);
+
+  client = gconf_client_get_default ();
+  if (!gconf_client_set_string (client, item->desc_gconf_key, new_text, NULL))
+    item->desc_editable = FALSE;
+
+  g_object_unref (client);
+}
+
 static const guint forbidden_keyvals[] = {
   /* Navigation keys */
   GDK_KEY_Home,
@@ -1038,6 +1075,24 @@
   return FALSE;
 }
 
+static void
+show_error (GtkWindow *parent,
+            GError *err)
+{
+  GtkWidget *dialog;
+
+  dialog = gtk_message_dialog_new (parent,
+                                   GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL,
+                                   GTK_MESSAGE_WARNING,
+                                   GTK_BUTTONS_OK,
+                                   _("Error saving the new shortcut"));
+
+  gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog),
+                                            "%s", err->message);
+  gtk_dialog_run (GTK_DIALOG (dialog));
+  gtk_widget_destroy (dialog);
+}
+
 typedef struct {
   CcKeyboardItem *orig_item;
   CcKeyboardItem *conflict_item;
@@ -1268,30 +1323,34 @@
 }
 
 static gchar *
-find_free_settings_path ()
+find_free_gconf_key (GError **error)
 {
-  char **used_names;
-  char *dir = NULL;
-  int i, num, n_names;
+  GConfClient *client;
 
-  used_names = g_settings_get_strv (settings, "custom-keybindings");
-  n_names = g_strv_length (used_names);
+  gchar *dir;
+  int i;
 
-  for (num = 0; dir == NULL; num++)
-    {
-      char *tmp;
-      gboolean found = FALSE;
+  client = gconf_client_get_default ();
 
-      tmp = g_strdup_printf ("%s/custom%d/", CUSTOM_KEYS_BASENAME, num);
-      for (i = 0; i < n_names && !found; i++)
-        found = strcmp (used_names[i], tmp) == 0;
+  for (i = 0; i < MAX_CUSTOM_SHORTCUTS; i++)
+    {
+      dir = g_strdup_printf ("%s/custom%d", GCONF_BINDING_DIR, i);
+      if (!gconf_client_dir_exists (client, dir, NULL))
+        break;
+      g_free (dir);
+    }
 
-      if (!found)
-        dir = tmp;
-      else
-        g_free (tmp);
+  if (i == MAX_CUSTOM_SHORTCUTS)
+    {
+      dir = NULL;
+      g_set_error_literal (error,
+                           g_quark_from_string ("Keyboard Shortcuts"),
+                           0,
+                           _("Too many custom shortcuts"));
     }
 
+  g_object_unref (client);
+
   return dir;
 }
 
@@ -1301,15 +1360,31 @@
 {
   CcKeyboardItem *item;
   GtkTreePath *path;
-  gchar *settings_path;
+  gchar *dir;
+  GError *error;
 
-  item = cc_keyboard_item_new (CC_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH);
+  error = NULL;
+  dir = find_free_gconf_key (&error);
+  if (dir == NULL)
+    {
+      show_error (GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (tree_view))), error);
 
-  settings_path = find_free_settings_path ();
-  cc_keyboard_item_load_from_gsettings_path (item, settings_path, TRUE);
-  g_free (settings_path);
+      g_error_free (error);
+      return;
+    }
 
+  /* FIXME this is way ugly */
+  item = cc_keyboard_item_new (CC_KEYBOARD_ITEM_TYPE_GCONF_DIR);
+  item->gconf_key_dir = g_strdup (dir);
+  item->gconf_key = g_strconcat (dir, "/binding", NULL);
+  item->editable = TRUE;
   item->model = model;
+  item->desc_gconf_key = g_strconcat (dir, "/name", NULL);
+  item->description = g_strdup ("");
+  item->desc_editable = TRUE;
+  item->cmd_gconf_key = g_strconcat (dir, "/action", NULL);
+  item->command = g_strdup ("");
+  item->cmd_editable = TRUE;
 
   if (edit_custom_shortcut (item) &&
       item->command && item->command[0])
@@ -1317,9 +1392,19 @@
       GPtrArray *keys_array;
       GtkTreeIter iter;
       GHashTable *hash;
-      GVariantBuilder builder;
-      char **settings_paths;
-      int i;
+      GConfClient *client;
+
+      /* store in gconf */
+      client = gconf_client_get_default ();
+      gconf_client_set_string (client, item->gconf_key, "", NULL);
+      gconf_client_set_string (client, item->desc_gconf_key, item->description, NULL);
+      gconf_client_set_string (client, item->cmd_gconf_key, item->command, NULL);
+      g_object_unref (client);
+      g_object_unref (item);
+
+      /* Now setup the actual item we'll be adding */
+      item = cc_keyboard_item_new (CC_KEYBOARD_ITEM_TYPE_GCONF_DIR);
+      cc_keyboard_item_load_from_gconf_dir (item, dir);
 
       hash = get_hash_for_group (BINDING_GROUP_USER);
       keys_array = g_hash_table_lookup (hash, _("Custom Shortcuts"));
@@ -1334,14 +1419,6 @@
       gtk_list_store_append (GTK_LIST_STORE (model), &iter);
       gtk_list_store_set (GTK_LIST_STORE (model), &iter, DETAIL_KEYENTRY_COLUMN, item, -1);
 
-      settings_paths = g_settings_get_strv (settings, "custom-keybindings");
-      g_variant_builder_init (&builder, G_VARIANT_TYPE ("as"));
-      for (i = 0; settings_paths[i]; i++)
-        g_variant_builder_add (&builder, "s", settings_paths[i]);
-      g_variant_builder_add (&builder, "s", item->gsettings_path);
-      g_settings_set_value (settings, "custom-keybindings",
-                            g_variant_builder_end (&builder));
-
       /* make the new shortcut visible */
       path = gtk_tree_model_get_path (model, &iter);
       gtk_tree_view_expand_to_path (tree_view, path);
@@ -1546,6 +1623,7 @@
 static void
 setup_dialog (CcPanel *panel, GtkBuilder *builder)
 {
+  GConfClient *client;
   GtkCellRenderer *renderer;
   GtkTreeViewColumn *column;
   GtkWidget *widget;
@@ -1605,7 +1683,7 @@
   treeview = GTK_TREE_VIEW (gtk_builder_get_object (builder,
                                                     "shortcut_treeview"));
 
-  settings = g_settings_new (BINDINGS_SCHEMA);
+  client = gconf_client_get_default ();
 
   g_signal_connect (treeview, "button_press_event",
                     G_CALLBACK (start_editing_cb), builder);
@@ -1615,6 +1693,10 @@
   renderer = gtk_cell_renderer_text_new ();
   g_object_set (G_OBJECT (renderer), "ellipsize", PANGO_ELLIPSIZE_END, NULL);
 
+  g_signal_connect (renderer, "edited",
+                    G_CALLBACK (description_edited_callback),
+                    treeview);
+
   column = gtk_tree_view_column_new_with_attributes (_("Action"),
                                                      renderer,
                                                      NULL);
@@ -1645,6 +1727,9 @@
   gtk_tree_view_append_column (treeview, column);
   gtk_tree_view_column_set_sort_column_id (column, DETAIL_KEYENTRY_COLUMN);
 
+  gconf_client_add_dir (client, GCONF_BINDING_DIR, GCONF_CLIENT_PRELOAD_ONELEVEL, NULL);
+  g_object_unref (client);
+
   model = gtk_list_store_new (DETAIL_N_COLUMNS, G_TYPE_STRING, G_TYPE_POINTER);
   gtk_tree_sortable_set_sort_func (GTK_TREE_SORTABLE (model),
                                    DETAIL_KEYENTRY_COLUMN,
